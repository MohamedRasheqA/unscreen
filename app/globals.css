@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes gradientFlow {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.animate-fadeIn {
  animation: fadeIn 0.8s ease-out forwards;
}

.animation-delay-300 {
  animation-delay: 0.3s;
}

.animate-gradient {
  background-size: 200% 200%;
  animation: gradientFlow 5s ease infinite;
}

@keyframes fadeInLeft {
  from { 
    opacity: 0; 
    transform: translateX(-50px);
  }
  to { 
    opacity: 1; 
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from { 
    opacity: 0; 
    transform: translateX(50px);
  }
  to { 
    opacity: 1; 
    transform: translateX(0);
  }
}

.animate-fadeIn-left {
  animation: fadeInLeft 0.8s ease-out forwards;
}

.animate-fadeIn-right {
  animation: fadeInRight 0.8s ease-out forwards;
}

.animation-delay-150 {
  animation-delay: 0.15s;
}

/* Make sure both cards have proper stacking context */
.relative {
  position: relative;
}

.z-10 {
  z-index: 10;
}

@keyframes slideIn {
  from { 
    opacity: 0;
    transform: translateX(30px);
  }
  to { 
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-slideIn {
  animation: slideIn 0.3s ease-out forwards;
}

@keyframes pulseSuccess {
  0%, 100% {
    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);
  }
  50% {
    box-shadow: 0 0 0 6px rgba(16, 185, 129, 0.2);
  }
}

.animate-pulse-success {
  animation: pulseSuccess 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}
